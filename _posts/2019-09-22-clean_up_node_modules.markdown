---
layout: post
title:      "Clean Up Node Modules"
date:       2019-09-22 11:28:03 -0400
permalink:  clean_up_node_modules
---

Sometimes when starting a new React project, it can take quite a bit of time to install all the dependencies and added modules. When you are done with the project or want to delete the project you can see how many files are embedded in the directory - thousands. 

I realized that quite a bit of the project real estate goes to node-modules. Take a look in the folder and you will see a variety of modules that you probably never heard of. So, do we need all of these modules for our project? Can we remove and should we remove unused modules and packages?

 Node has 3 types of modules
  1. Core modules contain the bare minimum Node functionality and are necessary for the operation of Node. 
  2. Local modules are created locally in the application are customized for the application environment. They can be packaged and shared throught NPM. 
  3. Third Party modules are downloaded by NPM as dependencies and packages for frameworks and libraries.  Depending on the program there may be a large amount. 
  
	
When using create-react-app you will notice how many dependencies and packages are included. Do we *need* all of these or are they extraneous? If not, how do we remove the ones we don't need? 
	
To remove extraneous Node modules. If you visit https://docs.npmjs.com/cli/prune.html you can see there is npm prune which removes extraneous modules if they are not listed on the parent packageâ€™s dependencies list.
It also important to check and see which flags are set because they may negate the process.

To remove Node packages use npm uninstall <package name>.

I am an anti-clutter person so the idea that I can personally manage the modules and packages appeals to me. However, I am still not exactly sure if I should and since the impact is minimal, I will leave them for now.
